

Netlist data structure

import re

class VerilogModule:
    def __init__(self, name):
        self.name = name
        self.ports = []
        self.instances = []
        self.nets = []

class VerilogInstance:
    def __init__(self, name, cell_type):
        self.name = name
        self.cell_type = cell_type
        self.connections = {}

class VerilogNet:
    def __init__(self, name):
        self.name = name
        self.pins = []

class VerilogPin:
    def __init__(self, port, instance, net):
        self.port = port
        self.instance = instance
        self.net = net

def read_verilog_netlist(file_path):
    modules = []
    current_module = None

    with open(file_path, 'r') as file:
        lines = file.readlines()

    for line in lines:
        line = line.strip()

        if line.startswith('//') or not line:
            continue

        if line.startswith('module'):
            module_name = re.findall(r'module\s+(\w+)', line)[0]
            current_module = VerilogModule(module_name)
            modules.append(current_module)

        elif current_module and line.startswith('endmodule'):
            current_module = None

        elif current_module:
            if '(' in line:
                instance_name, cell_type = re.findall(r'(\w+)\s+(\w+)\s*\(', line)[0]
                instance = VerilogInstance(instance_name, cell_type)
                current_module.instances.append(instance)
            elif line.startswith('.') and current_module.instances:
                port_name, net_name = re.findall(r'\.(\w+)\s*\(\s*(\w+)\s*\)', line)[0]
                instance.connections[port_name] = net_name
            elif line.startswith('wire ') or line.startswith('reg '):
                net_name = re.findall(r'(wire|reg)\s+(.*);', line)[0][1]
                net = VerilogNet(net_name)
                current_module.nets.append(net)
            elif line.startswith('input ') or line.startswith('output '):
                port_name = re.findall(r'(input|output)\s+(.*);', line)[0][1]
                current_module.ports.append(port_name)

    return modules

def write_verilog_netlist(modules, output_file):
    with open(output_file, 'w') as file:
        for module in modules:
            file.write(f"module {module.name} (\n")
            ports = ", ".join(module.ports)
            file.write(f"  {ports}\n")
            file.write(");\n")

            for instance in module.instances:
                file.write(f"  {instance.cell_type} {instance.name} (\n")
                connections = []
                for port, net in instance.connections.items():
                    connections.append(f"    .{port}({net})")
                file.write(",\n".join(connections) + "\n")
                file.write("  );\n")

            for net in module.nets:
                file.write(f"  wire {net.name};\n")

            file.write("endmodule\n\n")

# Example usage
if __name__ == "__main__":
    input_file = "path/to/your/verilog/input/file.v"
    output_file = "path/to/your/verilog/output/file.v"
    modules = read_verilog_netlist(input_file)
    write_verilog_netlist(modules, output_file)

Save it in graph database

from py2neo import Graph, Node, Relationship

class VerilogModule:
    # Define the class as before...

class VerilogInstance:
    # Define the class as before...

# ... Define other classes ...

def save_to_graph_database(modules):
    graph = Graph("bolt://localhost:7687", auth=("neo4j", "password"))

    for module in modules:
        module_node = Node("Module", name=module.name)
        graph.create(module_node)

        for instance in module.instances:
            instance_node = Node("Instance", name=instance.name, cell_type=instance.cell_type)
            graph.create(instance_node)
            graph.create(Relationship(module_node, "CONTAINS", instance_node))

            for port, net in instance.connections.items():
                port_node = Node("Port", name=port)
                net_node = Node("Net", name=net)
                graph.create(port_node)
                graph.create(net_node)
                graph.create(Relationship(instance_node, "USES_PORT", port_node))
                graph.create(Relationship(instance_node, "CONNECTS_TO", net_node))

        # ... Create nodes and relationships for nets, ports, etc ...

# Example usage
if __name__ == "__main__":
    input_file = "path/to/your/verilog/input/file.v"
    modules = read_verilog_netlist(input_file)
    save_to_graph_database(modules)




Input File : Netlist

module FourBitAdder (
    input [3:0] A,
    input [3:0] B,
    output [3:0] SUM,
    output COUT
);

    wire [3:0] carry;
    wire [3:0] sum;

    // First bit
    FullAdder fa0(.A(A[0]), .B(B[0]), .CIN(1'b0), .SUM(sum[0]), .COUT(carry[0]));

    // Subsequent bits
    FullAdder fa1(.A(A[1]), .B(B[1]), .CIN(carry[0]), .SUM(sum[1]), .COUT(carry[1]));
    FullAdder fa2(.A(A[2]), .B(B[2]), .CIN(carry[1]), .SUM(sum[2]), .COUT(carry[2]));
    FullAdder fa3(.A(A[3]), .B(B[3]), .CIN(carry[2]), .SUM(sum[3]), .COUT(COUT));

    assign SUM = sum;

endmodule

module FullAdder (
    input A,
    input B,
    input CIN,
    output SUM,
    output COUT
);

    assign SUM = A ^ B ^ CIN;
    assign COUT = (A & B) | (B & CIN) | (CIN & A);

endmodule



Multithreaded implementation

import multiprocessing

def parse_netlist(file_path):
    # Replace this with your netlist parsing logic
    with open(file_path, 'r') as file:
        netlist = file.read()
    return netlist

def process_netlist(file_path):
    netlist = parse_netlist(file_path)
    print(f"Processed netlist from {file_path} with length {len(netlist)}")

if __name__ == "__main__":
    input_files = ["file1.v", "file2.v", "file3.v"]  # Replace with actual file paths

    # Number of CPU cores to use for parallel processing
    num_cores = multiprocessing.cpu_count()

    with multiprocessing.Pool(processes=num_cores) as pool:
        pool.map(process_netlist, input_files)



Requirements üëç
T0 : 4th-sep-2023

Read the file in multi threaded mode. T0 + 1
Save the objects/attributes in the data structure ( relationship ). T0 + 2
Save it in (file/database) Eg., tmp_db/Netlist.db T0 + 3
Read the db T0+3
Write the netlist file multithreaded mode. T0+4
Query/functions the object + attributes in the DB T0+5

Reading the file:Done (Read in multi-threaded mode:In-progress) 
Save the objects/attributes in data structure : Done
Saving into database : Done
Read the db: In-progress
Write the netlist file: Done (Write in multi-threaded mode:In-progress) 
Query/functions the object + attributes in the DB T0+5: _____


Port mapping